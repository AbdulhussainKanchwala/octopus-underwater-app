name: deploy to lambda
on:
  push:
    branches: [ "main" ]
env:
  AWS_REGION: us-west-1
  ECR_REPOSITORY: formatter-lambda
jobs:
  deploy:
    name: deploy filter lambda dev 
    runs-on: ubuntu-latest
    steps:
      - name: checkout source code
        uses: actions/checkout@v1
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.TB_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.TB_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: lambda deploy
        uses: appleboy/lambda-action@master
        with:
          aws_access_key_id: ${{ secrets.TB_AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.TB_AWS_SECRET_ACCESS_KEY }}
          aws_region: ${{ secrets.AWS_REGION }}
          function_name: lambda_push_function_logger
          #memory_size: 5120
         # timeout: 900
          image_uri: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}
